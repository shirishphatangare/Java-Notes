
Creating a local git repository from folder and linking it with remote 

Shirish@LAPTOP-7B3OO6RC MINGW64 /C/git-repos
$ cd Azure_Projects/

Shirish@LAPTOP-7B3OO6RC MINGW64 /C/git-repos/Azure_Projects
$ git init
Initialized empty Git repository in C:/git-repos/Azure_Projects/.git/

Shirish@LAPTOP-7B3OO6RC MINGW64 /C/git-repos/Azure_Projects (master)
$ git remote -v

Shirish@LAPTOP-7B3OO6RC MINGW64 /C/git-repos/Azure_Projects (master)
$ git remote add origin https://github.com/shirishphatangare/Azure_Projects.git

Shirish@LAPTOP-7B3OO6RC MINGW64 /C/git-repos/Azure_Projects (master)
$ git remote -v
origin  https://github.com/shirishphatangare/Azure_Projects.git (fetch)
origin  https://github.com/shirishphatangare/Azure_Projects.git (push)

Shirish@LAPTOP-7B3OO6RC MINGW64 /C/git-repos/Azure_Projects (master)
$ git add .

Shirish@LAPTOP-7B3OO6RC MINGW64 /C/git-repos/Azure_Projects (master)
$ git commit -m "Adding Azure Notes initial version"
[master (root-commit) 48dd275] Adding Azure Notes initial version
 1 file changed, 1 insertion(+)
 create mode 100644 Azure_Notes.txt

Shirish@LAPTOP-7B3OO6RC MINGW64 /C/git-repos/Azure_Projects (master)
$ git push
fatal: The current branch master has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin master

Shirish@LAPTOP-7B3OO6RC MINGW64 /C/git-repos/Azure_Projects (master)
$ git push --set-upstream origin master
Counting objects: 3, done.
Writing objects: 100% (3/3), 248 bytes | 248.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/shirishphatangare/Azure_Projects.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.

Shirish@LAPTOP-7B3OO6RC MINGW64 /C/git-repos/Azure_Projects (master)
$ git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean

------------------------------------------------------------------------------

Clone the repository.
git clone <Repo-URL>


If some branch is not there in local repository
git fetch --all 
git checkout <Branch-Name>


Get the status of your local repository.
git status

"git checkout -- <file>..." to discard changes in working directory

Moves changes from the working directory to the Git staging area
git add <File-Name>
git add -A  --> stages all changes
git add .   --> stages new files and modifications, without deletions
git add -u  --> stages modifications and deletions, without new files

To unstage
git reset HEAD

------------------------------------------------------------------------------

Create a branch dev from master --

1) change to master branch
git checkout master

2) Create a branch dev from master
git checkout -b dev master

3) push the branch dev to remote
git push origin dev


To Commit - Takes the staged snapshot and commits it 
git commit -m 'Initial commit'
git commit <File-Name> -m 'making a change in a branch'

Up until this point, everything you have done is on your local system and invisible to your remote repository until you push those changes.
Git's collaboration model gives every developer their own copy of the repository, complete with its own local history and branch structure. 
Users typically need to share a series of commits rather than a single changeset. 
Instead of committing a changeset from a working copy to the central repository, Git lets you share entire branches between repositories.
Publish local history by "pushing" branches to other repositories. You see what others have contributed by "pulling" branches into your local repository.

Send your committed changes to remote repository. This command specifies that you are pushing to the target branch on origin (the remote server).
git push origin <Branch-Name>

To pull all the changes from remote  
git pull origin <Branch-Name>

Branches are most powerful when you're working on a team. 
You can work on your own part of a project from your own branch, pull updates from Bitbucket, and then merge all your work into the main branch when it's ready. 
It's important to understand that branches are just pointers to commits. When you create a branch, all Git needs to do is create a new pointer—it doesn’t create a whole new set of files or folders. 

Creates a branch but does not switch you to that branch
git branch <Branch-Name>

Checkout the new branch you just created to start using it.
git checkout <Branch-Name>

Make changes in a file in checked-out branch and save it --- git status --- git add <File-Name> --- git commit <File-Name> -m 'making a change in a branch'
Merge the changes back into the master branch. (Local branch to Local Master Merge)
Since you created only one branch and made one change, use the fast-forward branch method to merge. 
You can do a fast-forward merge because you have a linear path from the current branch tip to the target branch.

1)  Navigate to the top level of your local repository. --- cd <Local-Repo-Path>
2)  Enter the git status command to be sure you have all your changes committed and find out what branch you have checked out. --- git status
3)  Switch to the target branch. --- git checkout <Target-Branch-Name>
4)  Merge changes from the source branch into the target branch --- git merge <Source-Branch-Name>
5)  You can delete the branch, it it is no longer needed --- git branch -d <Source-Branch-Name>
To delete a remote branch you can use the command ---        git push origin --delete <branch_name>

Now our local Target-Branch is ready and we need to push local <Target-Branch> to Remote <Target-Branch>

How to push your change to the remote repository -- git push origin <Target-Branch>


To undo a merge:
git merge --abort

Git clean - If you want to see which files will be deleted 
git clean -n

Git clean - when you are comfortable
git clean -f


git config --global --list
git config --global user.name "Shirish Phatangare (OSV)"
git config --global user.email "shirish.phatangare.osv@fedex.com"

--------------------------------------------------------------------------
When LDAP password changes and  getting access denied error
Clear old password using below command 
git config --system --unset credential.helper
and then provide new password when prompted

Actaully there is no need to remove/unset credential.helper property, simply change password in Windows Credential Manager as below --

When git password changes, update git Credentials stored in Windows Credentials in >> Control Panel\All Control Panel Items\Credential Manager
Just in case git giving prompts, add credential.helper as manager to read credentials from Credential Manager
git config --system --add credential.helper manager

--------------------------------------------------------------------------


Stashing takes the dirty state of your working directory — that is, your modified tracked files and staged changes — and saves it on a stack of unfinished changes that you can reapply at any time.
git stash





1) Team --- Synchorinise with workspace -- Select destination as remote/origin/<Branch> -- Select both fetch and compare checboxes and click finish) -- Resolve All Confilcts
2) Commit code using git commit
3) Use git pull origin <Branch-Name> or git merge
4) Work on local
5) add - commit and push local changes to remote





# fetch the changes from the remote
git fetch origin

# show commit logs of changes
git log master..origin/master

# show diffs of changes
git diff master..origin/master

# apply the changes by merge..
git merge origin/master

# .. or just pull the changes
git pull



Pull branch from fork

git remote add fork <url of fork>
git fetch fork
git checkout -b fork_branch fork/<branch>


Local repo associations with remote

Remove Association with upstream
git branch --unset-upstream

Set Association with upstream
git branch --set-upstream-to=origin/<Branch-Name>

The current branch offshore-dev has no upstream branch.
To push the current branch and set the remote as upstream, use --

git push --set-upstream origin offshore-dev

--------------------------------------------------------

When do you need to overwrite local files?

If you feel the need to discard all your local changes and just reset/overwrite everything with a copy from the remote branch then you should follow this guide.
Important: If you have any local changes, they will be lost. With or without --hard option, any local commits that haven’t been pushed will be lost.
If you have any files that are not tracked by Git (e.g. uploaded user content), these files will not be affected.

To overwrite your local files do:

git fetch --all
git reset --hard <remote>/<branch_name>


It’s worth noting that it is possible to maintain current local commits by creating a branch from master or whichever branch you want to work on before resetting:

For Example:

git checkout master
git branch new-branch-to-save-current-commits
git fetch --all
git reset --hard origin/master

To remove the last commit from git
git reset --hard HEAD^

To remove the last two commits
git reset --hard HEAD~2


-------------------------------------------------------------------------

To resolve conflicts manually and merge/pull ours verion

git merge --strategy-option ours origin offshore-dev
git pull --strategy-option ours origin offshore-dev

-------------------------------------------------------------------------

To resolve conflicts manually and merge/pull theirs verion

git merge --strategy-option theirs origin offshore-dev
git pull --strategy-option theirs origin offshore-dev

----------------------------------------------------------------


Merge one repository to other repository

cd <Dest-repo>
git remote add old-repo <Src-repo>
git remote update
git merge --allow-unrelated-histories old-repo/development
git push origin development

-----------------------------------------------------------------


Github create empty branch

git checkout --orphan empty-branch
git rm -rf .
git commit --allow-empty -m "root commit"
git push origin empty-branch

-----------------------------------------------------------------
Rename branch

git branch -m old_branch new_branch         # Rename branch locally    
git push origin :old_branch                 # Delete the old branch    
git push --set-upstream origin new_branch   # Push the new branch, set local branch to track the new remote

------------------------------------------------------------------

git tags

Listing tags -  git tag -l -n3
Create tags - git tag -a RELEASE-v1.0.0 -m "Releasing version v1.0.0"
Deleting tags - git tag -d <tag_identifier>
Publishing tags - git push origin <tag_identifier>

--------
warning: you may want to set your merge.renamelimit variable to at least 2507 and retry the command.

git config merge.renameLimit 2507
git config --unset merge.renameLimit


------------------------------

Office Git Notes

List the current configured remote repo associated with local Repo (fork)
git remote -v

Specify new remote upstream repo that will be synced with local Repo (fork)
git remote add upstream <NEW-GIT-REPO-URL>

Remember that above command will add new reference 'upstream' for new repo. Existing reference and repo will not be replaced here
We can confirm this using below command
git remote -v

'git remote -v' lists two separate urls as fetch and push. We can have different Repos for fetch and push as below
git remote set-url --push origin <NEW-PUSH-GIT-REPO-URL>

Above command changes push git repo, which can be verified again with 'git remote -v' command.

Rename remote reference (Rename origin to upstream)
git remote rename <OLD-REF> <NEW-REF>
git remote rename origin upstream

------

Fetch/pull/push commands

git fetch <Remote-Ref> <Branch-Name>
git push <Remote-Ref> <Branch-Name>
git pull <Remote-Ref> <Branch-Name>

For e.g.
git pull origin master

---

Compare local file with remote file on command prompt
git diff <Remote-Ref> <Branch-Name> -- <local-file-path>

or simply (to compare a given local file with same file in default remote repo)
git diff <local-file-path>

---

Create multiple Forks of a GitHub Repo

step 1 - Clone the original repo to your local machine
git clone <GIT-REPO-URL> <App-name>

Step 2 - Create a new empty repo in your GitHub account and name it as <App-name>

Step 3 - Check the default remote links of the cloned repo (in Step 1)
cd <App-name>
git remote -v

Step 4 - Rename default 'origin' to 'upstream' and add newly created empty repo (in Step 2) as the 'origin'
git remote rename origin upstream
git remote add origin <NEW-EMPTY-REPO-URL>
git remote -v

Step 5 - Push from your local repo to your new remote (origin)
git push -u origin <Branch-Name>

Note that this newly created repo is just a copy of original fork and it do not behave as a fork for pull requests.

----

While pulling files from remote, if there are any merge conflicts

1) Abort merge
git merge --abort

2) Fix merge conflicts and commit changes
git commit

3) Now pull from remote, but now tell git to prefer local version (ours) of conflicting files over incoming files.
git pull -s recursive -X ours <Remote-Ref> <branch_name>

or simply (for default repo and branch)
git pull -s recursive -X ours

------

Working on different branch instead of forking

1) Clone from branch <Branch1> on <Git-Repo>
git clone <Git-Repo> -b <Branch1> <App-Name>

2) Create a new local branch from base branch
git branch <New-Local-branch> <Branch1>

3) See all local and remote branches
git branch -a

4) Switch to newly created branch
git checkout <New-Local-branch>

5) Push new branch to remote
git push -u origin <New-Local-branch>

----

































































































