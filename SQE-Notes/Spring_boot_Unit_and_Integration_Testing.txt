Spring Boot Integration Testing

1) Spring boot integration testing involves starting a real web server and testing each layer (Controller, service and repository).
2) The @SpringBootTest annotation tells Spring Boot to look for a main configuration class (one with @SpringBootApplication) in /src/main/java
and use that to start a Spring application context.

// A) This test is a simple sanity check test that will fail if the application context cannot start.
@SpringBootTest
public class SmokeTest {

	@Autowired
	private HomeController controller;

	@Test
	public void contextLoads() throws Exception {
		assertThat(controller).isNotNull();
	}
}

3) @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT). Use of webEnvironment=RANDOM_PORT to start the server with a random port.
4) Spring Boot provides a TestRestTemplate for you. All you have to do is add @Autowired to it. 
   (import org.springframework.boot.test.web.client.TestRestTemplate;)
5) Selected port gets injected into the 'port' variable with @LocalServerPort.   

// B) This test is to start the application on a web server and listen for a connection (as it would do in production) and then send an HTTP request and assert the response. This will test all the layers (Controller, service and repository) of an application.   

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class HttpRequestTest {

	@LocalServerPort
	private int port;

	@Autowired
	private TestRestTemplate restTemplate;

	// Since we have an application context loaded, below test hits actual Controller, service and repository layers and return the response.
	// Since it is integration test and not the system test, we can mock a DB with in-memory H2 DB or use @sql annotation at the method level.
	// test.sql is present under /src/test/resources
	@Test
	//@sql("/test.sql") use only in case of DB interaction
	public void greetingShouldReturnDefaultMessage() throws Exception {
		assertThat(this.restTemplate.getForObject("http://localhost:" + port + "/",	String.class)).contains("Hello, World");
	}
}

A nice feature of the Spring Test support is that the application context is cached between tests. That way, if you have multiple methods in a test case or multiple test cases with the same configuration, they incur the cost of starting the application only once. You can control the cache by using the @DirtiesContext annotation.



6) To start the full Spring application context but without the server, use Springâ€™s MockMvc and ask for that to be injected for you by using the @AutoConfigureMockMvc annotation on the test case. This way, almost of the full stack is used, and your code will be called in exactly the same way as if it were processing a real HTTP request but without the cost of starting the server. 

// C) To start the full Spring application context but without the server.
@SpringBootTest
@AutoConfigureMockMvc
public class TestingWebApplicationTest {

	@Autowired
	private MockMvc mockMvc;

	@Test
	public void shouldReturnDefaultMessage() throws Exception {
		this.mockMvc.perform(get("/")).andDo(print()).andExpect(status().isOk())
				.andExpect(content().string(containsString("Hello, World")));
	}
}

Points 7 and 8 below can be considered as Spring Boot unit testing of the web (Controller) layer.

7)  We can narrow the tests to only the web (Controller) layer by using @WebMvcTest annotation. 

// D) In this test, Spring Boot instantiates only the web layer rather than the whole context.
@WebMvcTest
public class WebLayerTest {

	@Autowired
	private MockMvc mockMvc;

	@Test
	public void shouldReturnDefaultMessage() throws Exception {
		this.mockMvc.perform(get("/")).andDo(print()).andExpect(status().isOk())
				.andExpect(content().string(containsString("Hello, World")));
	}
}


8) In an application with multiple controllers, you can even ask for only one to be instantiated by using @WebMvcTest(GreetingController.class)
Let us assume that GreetingController has the service dependency. In this case, Spring automatically injects the service dependency into the controller. However,
since we are intersted in testing only Controller(web) layer, we have to mock service using @MockBean annotation. 

We use @MockBean to create and inject a mock for the service dependency. Further, we can stub this dependency using Mockito.

@WebMvcTest(GreetingController.class)
public class WebMockTest {

	@Autowired
	private MockMvc mockMvc;

	@MockBean
	private GreetingService service;

	@Test
	public void greetingShouldReturnMessageFromService() throws Exception {
		when(service.greet()).thenReturn("Hello, Mock");
		this.mockMvc.perform(get("/greeting")).andDo(print()).andExpect(status().isOk())
				.andExpect(content().string(containsString("Hello, Mock")));
	}
}

---

Spring Boot Integration Testing With @DataJpaTest (testing the persistence layer)


@RunWith(SpringRunner.class)
@DataJpaTest
public class EmployeeRepositoryIntegrationTest {

    @Autowired
    private TestEntityManager entityManager;

    @Autowired
    private EmployeeRepository employeeRepository;

    // write test cases here

}

@RunWith(SpringRunner.class) provides a bridge between Spring Boot test features and JUnit. Whenever we are using any Spring Boot testing features in our JUnit tests, this annotation will be required.

@DataJpaTest provides some standard setup needed for testing the persistence layer:

1) configuring H2, an in-memory database
2) setting Hibernate, Spring Data, and the DataSource
3) performing an @EntityScan
4) turning on SQL logging

To carry out DB operations, we need some records already in our database. To setup this data, we can use TestEntityManager.

The Spring Boot TestEntityManager is an alternative to the standard JPA EntityManager that provides methods commonly used when writing tests.

EmployeeRepository is the component that we are going to test.

@Test
public void whenFindByName_thenReturnEmployee() {
    // given
    Employee alex = new Employee("alex");
    entityManager.persist(alex);
    entityManager.flush();

    // when
    Employee found = employeeRepository.findByName(alex.getName());

    // then
    assertThat(found.getName()).isEqualTo(alex.getName());
}

In the above test, we're using the TestEntityManager to insert an Employee in the DB and reading it via the find by name API.

-----

Spring Boot Unit Testing with @TestConfiguration and @MockBean

During component scanning, we might find that components or configurations created only for specific tests accidentally get picked up everywhere. To help prevent this, Spring Boot provides the @TestConfiguration annotation that we can add on classes in src/test/java to indicate that they should not be picked up by scanning.

In Spring Boot, @TestConfiguration annotation can be used to define/override beans for unit tests.

@TestConfiguration
public class MyTestConfig {
  @Bean
  public HelloService helloService(){
      return new HelloService() {
          @Override
          public String getMessage(String name) {
              return "Test hello: "+name;
          }
      };
  }
}

and then import MyTestConfig class in the test class.

@RunWith(SpringRunner.class)
@SpringBootTest
@Import(MyTestConfig.class) // This will override HelloService from main application context.
public class MyHelloProcessorTest { ...... }

Following example shows how to use @TestConfiguration in a static nested class inside a test class. In that case, we don't have to import it explicitly in enclosing class.

// Service Class

@Service
public class EmployeeServiceImpl implements EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Override
    public Employee getEmployeeByName(String name) {
        return employeeRepository.findByName(name);
    }
}


// Test class

@RunWith(SpringRunner.class)
public class EmployeeServiceImplIntegrationTest {

    @TestConfiguration
    static class EmployeeServiceImplTestContextConfiguration {
 
        @Bean
        public EmployeeService employeeService() {
            return new EmployeeServiceImpl();
        }
    }

    @Autowired
    private EmployeeService employeeService;

	// It creates a Mock for the EmployeeRepository, which can be used to bypass the call to the actual EmployeeRepository:
    @MockBean
    private EmployeeRepository employeeRepository;

    // write test cases here
}
